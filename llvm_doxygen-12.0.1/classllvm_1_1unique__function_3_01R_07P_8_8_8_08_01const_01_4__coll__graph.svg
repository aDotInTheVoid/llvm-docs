<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 -->
<!-- Title: llvm::unique_function&lt; R(P...) const &gt; Pages: 1 -->
<svg width="1582pt" height="399pt"
 viewBox="0.00 0.00 1582.00 398.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 394.5)">
<title>llvm::unique_function&lt; R(P...) const &gt;</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="1465,-313.5 1465,-343.5 1574,-343.5 1574,-313.5 1465,-313.5"/>
<text text-anchor="start" x="1473" y="-331.5" font-family="Helvetica" font-size="10.00">llvm::unique_function</text>
<text text-anchor="middle" x="1519.5" y="-320.5" font-family="Helvetica" font-size="10.00">&lt; R(P...) const &gt;</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="classllvm_1_1detail_1_1UniqueFunctionBase.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="1290,-313.5 1290,-343.5 1428,-343.5 1428,-313.5 1290,-313.5"/>
<text text-anchor="start" x="1298" y="-331.5" font-family="Helvetica" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="1359" y="-320.5" font-family="Helvetica" font-size="10.00">Base&lt; R, P... &gt;</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M1438.24,-328.5C1447.22,-328.5 1456.22,-328.5 1464.77,-328.5"/>
<polygon fill="midnightblue" stroke="midnightblue" points="1438.14,-325 1428.14,-328.5 1438.14,-332 1438.14,-325"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="classsize__t.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="251.5,-371 251.5,-390 293.5,-390 293.5,-371 251.5,-371"/>
<text text-anchor="middle" x="272.5" y="-378" font-family="Helvetica" font-size="10.00">size_t</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M303.85,-380.93C420.58,-382.31 851.79,-384.87 1205,-353.5 1232.88,-351.02 1263.36,-346.43 1289.72,-341.86"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="303.59,-377.43 293.54,-380.8 303.5,-384.43 303.59,-377.43"/>
<text text-anchor="middle" x="932.5" y="-381.5" font-family="Helvetica" font-size="10.00"> InlineStorageSize</text>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="classllvm_1_1detail_1_1UniqueFunctionBase.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="863.5,-313.5 863.5,-343.5 1001.5,-343.5 1001.5,-313.5 863.5,-313.5"/>
<text text-anchor="start" x="871.5" y="-331.5" font-family="Helvetica" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="932.5" y="-320.5" font-family="Helvetica" font-size="10.00">Base&lt; ReturnT, ParamTs &gt;</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node5 -->
<g id="edge6" class="edge">
<title>Node3&#45;&gt;Node5</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M304.07,-380.85C354.69,-380.88 458.86,-378.59 545,-361.5 553.27,-359.86 554.73,-357.15 563,-355.5 666.31,-334.83 788.75,-329.57 863.24,-328.45"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="303.84,-377.35 293.83,-380.81 303.81,-384.35 303.84,-377.35"/>
<text text-anchor="middle" x="602.5" y="-358.5" font-family="Helvetica" font-size="10.00"> InlineStorageSize</text>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="classstruct_01IsSizeLessThanThresholdT_3_01T_00_01std_1_1enable__if__t_3_01sizeof_07T_08_3_0a2_06e741237076841ec78090fdcb550252d.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="660,-0.5 660,-294.5 1205,-294.5 1205,-0.5 660,-0.5"/>
<text text-anchor="start" x="668" y="-282.5" font-family="Helvetica" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="668" y="-271.5" font-family="Helvetica" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="668" y="-260.5" font-family="Helvetica" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="668" y="-249.5" font-family="Helvetica" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="668" y="-238.5" font-family="Helvetica" font-size="10.00"> T &gt; using AdjustedParamT=typename</text>
<text text-anchor="start" x="668" y="-227.5" font-family="Helvetica" font-size="10.00"> std::conditional&lt; !std::is_reference</text>
<text text-anchor="start" x="668" y="-216.5" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_copy</text>
<text text-anchor="start" x="668" y="-205.5" font-family="Helvetica" font-size="10.00">_constructible&lt; T &gt;::value &amp;&amp;llvm::is_trivially</text>
<text text-anchor="start" x="668" y="-194.5" font-family="Helvetica" font-size="10.00">_move_constructible&lt; T &gt;::value &amp;&amp;llvm::detail</text>
<text text-anchor="start" x="668" y="-183.5" font-family="Helvetica" font-size="10.00">::UniqueFunctionBase::IsSizeLessThanThresholdT</text>
<text text-anchor="start" x="668" y="-172.5" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value, T, T &amp; &gt;::type;using CallPtrT=R(*)</text>
<text text-anchor="start" x="668" y="-161.5" font-family="Helvetica" font-size="10.00">(void *CallableAddr, AdjustedParamT&lt; ParamTs &gt;...</text>
<text text-anchor="start" x="668" y="-150.5" font-family="Helvetica" font-size="10.00"> Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="668" y="-139.5" font-family="Helvetica" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void</text>
<text text-anchor="start" x="668" y="-128.5" font-family="Helvetica" font-size="10.00"> *CallableAddr);struct alignas(8) TrivialCallback { CallPtrT</text>
<text text-anchor="start" x="668" y="-117.5" font-family="Helvetica" font-size="10.00"> CallPtr;};struct alignas(8) NonTrivialCallbacks { CallPtrT</text>
<text text-anchor="start" x="668" y="-106.5" font-family="Helvetica" font-size="10.00"> CallPtr;MovePtrT MovePtr;DestroyPtrT DestroyPtr;};using CallbackPointerUnionT</text>
<text text-anchor="start" x="668" y="-95.5" font-family="Helvetica" font-size="10.00">=llvm::PointerUnion&lt; TrivialCallback *, NonTrivialCallbacks * &gt;;union</text>
<text text-anchor="start" x="668" y="-84.5" font-family="Helvetica" font-size="10.00"> StorageUnionT { struct OutOfLineStorageT { void *StoragePtr;size_t Size;</text>
<text text-anchor="start" x="668" y="-73.5" font-family="Helvetica" font-size="10.00">size_t Alignment;} OutOfLineStorage;static_assert(sizeof(OutOfLineStorageT)</text>
<text text-anchor="start" x="668" y="-62.5" font-family="Helvetica" font-size="10.00">&lt;=InlineStorageSize, &quot;Should always use all of the out&#45;of&#45;line storage for</text>
<text text-anchor="start" x="668" y="-51.5" font-family="Helvetica" font-size="10.00"> inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="668" y="-40.5" font-family="Helvetica" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="668" y="-29.5" font-family="Helvetica" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="668" y="-18.5" font-family="Helvetica" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="932.5" y="-7.5" font-family="Helvetica" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node2 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node2</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M1214.3,-267.23C1257.36,-285.59 1296.2,-302.15 1322.62,-313.41"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="1215.62,-263.99 1205.05,-263.28 1212.87,-270.42 1215.62,-263.99"/>
<text text-anchor="middle" x="1247.5" y="-292.5" font-family="Helvetica" font-size="10.00"> CallPtr</text>
</g>
<!-- Node5&#45;&gt;Node2 -->
<g id="edge4" class="edge">
<title>Node5&#45;&gt;Node2</title>
<path fill="none" stroke="orange" stroke-dasharray="5,2" d="M1012.19,-328.5C1091.99,-328.5 1214.22,-328.5 1289.97,-328.5"/>
<polygon fill="orange" stroke="orange" points="1011.7,-325 1001.7,-328.5 1011.7,-332 1011.7,-325"/>
<text text-anchor="middle" x="1247.5" y="-331.5" font-family="Helvetica" font-size="10.00"> &lt; R, P... &gt;</text>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:title=" ">
<polygon fill="none" stroke="#bfbfbf" points="0,-57.5 0,-351.5 545,-351.5 545,-57.5 0,-57.5"/>
<text text-anchor="start" x="8" y="-339.5" font-family="Helvetica" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="8" y="-328.5" font-family="Helvetica" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="8" y="-317.5" font-family="Helvetica" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="8" y="-306.5" font-family="Helvetica" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="8" y="-295.5" font-family="Helvetica" font-size="10.00"> T &gt; using AdjustedParamT=typename</text>
<text text-anchor="start" x="8" y="-284.5" font-family="Helvetica" font-size="10.00"> std::conditional&lt; !std::is_reference</text>
<text text-anchor="start" x="8" y="-273.5" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_copy</text>
<text text-anchor="start" x="8" y="-262.5" font-family="Helvetica" font-size="10.00">_constructible&lt; T &gt;::value &amp;&amp;llvm::is_trivially</text>
<text text-anchor="start" x="8" y="-251.5" font-family="Helvetica" font-size="10.00">_move_constructible&lt; T &gt;::value &amp;&amp;llvm::detail</text>
<text text-anchor="start" x="8" y="-240.5" font-family="Helvetica" font-size="10.00">::UniqueFunctionBase::IsSizeLessThanThresholdT</text>
<text text-anchor="start" x="8" y="-229.5" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value, T, T &amp; &gt;::type;using CallPtrT=ReturnT</text>
<text text-anchor="start" x="8" y="-218.5" font-family="Helvetica" font-size="10.00">(*)(void *CallableAddr, AdjustedParamT&lt; ParamTs &gt;...</text>
<text text-anchor="start" x="8" y="-207.5" font-family="Helvetica" font-size="10.00"> Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="8" y="-196.5" font-family="Helvetica" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void</text>
<text text-anchor="start" x="8" y="-185.5" font-family="Helvetica" font-size="10.00"> *CallableAddr);struct alignas(8) TrivialCallback { CallPtrT</text>
<text text-anchor="start" x="8" y="-174.5" font-family="Helvetica" font-size="10.00"> CallPtr;};struct alignas(8) NonTrivialCallbacks { CallPtrT</text>
<text text-anchor="start" x="8" y="-163.5" font-family="Helvetica" font-size="10.00"> CallPtr;MovePtrT MovePtr;DestroyPtrT DestroyPtr;};using CallbackPointerUnionT</text>
<text text-anchor="start" x="8" y="-152.5" font-family="Helvetica" font-size="10.00">=llvm::PointerUnion&lt; TrivialCallback *, NonTrivialCallbacks * &gt;;union</text>
<text text-anchor="start" x="8" y="-141.5" font-family="Helvetica" font-size="10.00"> StorageUnionT { struct OutOfLineStorageT { void *StoragePtr;size_t Size;</text>
<text text-anchor="start" x="8" y="-130.5" font-family="Helvetica" font-size="10.00">size_t Alignment;} OutOfLineStorage;static_assert(sizeof(OutOfLineStorageT)</text>
<text text-anchor="start" x="8" y="-119.5" font-family="Helvetica" font-size="10.00">&lt;=InlineStorageSize, &quot;Should always use all of the out&#45;of&#45;line storage for</text>
<text text-anchor="start" x="8" y="-108.5" font-family="Helvetica" font-size="10.00"> inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="8" y="-97.5" font-family="Helvetica" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="8" y="-86.5" font-family="Helvetica" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="8" y="-75.5" font-family="Helvetica" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="272.5" y="-64.5" font-family="Helvetica" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node5 -->
<g id="edge5" class="edge">
<title>Node6&#45;&gt;Node5</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M555.09,-283.09C590.23,-291.2 625.82,-298.61 660,-304.5 728.67,-316.33 808.16,-322.5 863.32,-325.59"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="555.73,-279.64 545.19,-280.79 554.14,-286.46 555.73,-279.64"/>
<text text-anchor="middle" x="602.5" y="-303.5" font-family="Helvetica" font-size="10.00"> CallPtr</text>
</g>
</g>
</svg>
