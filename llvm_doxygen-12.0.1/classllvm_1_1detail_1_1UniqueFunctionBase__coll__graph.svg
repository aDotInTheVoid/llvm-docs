<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.44.0 (0)
 -->
<!-- Title: llvm::detail::UniqueFunctionBase&lt; ReturnT, ParamTs &gt; Pages: 1 -->
<svg width="806pt" height="342pt"
 viewBox="0.00 0.00 806.00 341.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 337.5)">
<title>llvm::detail::UniqueFunctionBase&lt; ReturnT, ParamTs &gt;</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="660,-83 660,-113 798,-113 798,-83 660,-83"/>
<text text-anchor="start" x="668" y="-101" font-family="Helvetica" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="729" y="-90" font-family="Helvetica" font-size="10.00">Base&lt; ReturnT, ParamTs &gt;</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:title=" ">
<polygon fill="none" stroke="#bfbfbf" points="0,-39 0,-333 545,-333 545,-39 0,-39"/>
<text text-anchor="start" x="8" y="-321" font-family="Helvetica" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="8" y="-310" font-family="Helvetica" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="8" y="-299" font-family="Helvetica" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="8" y="-288" font-family="Helvetica" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="8" y="-277" font-family="Helvetica" font-size="10.00"> T &gt; using AdjustedParamT=typename</text>
<text text-anchor="start" x="8" y="-266" font-family="Helvetica" font-size="10.00"> std::conditional&lt; !std::is_reference</text>
<text text-anchor="start" x="8" y="-255" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_copy</text>
<text text-anchor="start" x="8" y="-244" font-family="Helvetica" font-size="10.00">_constructible&lt; T &gt;::value &amp;&amp;llvm::is_trivially</text>
<text text-anchor="start" x="8" y="-233" font-family="Helvetica" font-size="10.00">_move_constructible&lt; T &gt;::value &amp;&amp;llvm::detail</text>
<text text-anchor="start" x="8" y="-222" font-family="Helvetica" font-size="10.00">::UniqueFunctionBase::IsSizeLessThanThresholdT</text>
<text text-anchor="start" x="8" y="-211" font-family="Helvetica" font-size="10.00">&lt; T &gt;::value, T, T &amp; &gt;::type;using CallPtrT=ReturnT</text>
<text text-anchor="start" x="8" y="-200" font-family="Helvetica" font-size="10.00">(*)(void *CallableAddr, AdjustedParamT&lt; ParamTs &gt;...</text>
<text text-anchor="start" x="8" y="-189" font-family="Helvetica" font-size="10.00"> Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="8" y="-178" font-family="Helvetica" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void</text>
<text text-anchor="start" x="8" y="-167" font-family="Helvetica" font-size="10.00"> *CallableAddr);struct alignas(8) TrivialCallback { CallPtrT</text>
<text text-anchor="start" x="8" y="-156" font-family="Helvetica" font-size="10.00"> CallPtr;};struct alignas(8) NonTrivialCallbacks { CallPtrT</text>
<text text-anchor="start" x="8" y="-145" font-family="Helvetica" font-size="10.00"> CallPtr;MovePtrT MovePtr;DestroyPtrT DestroyPtr;};using CallbackPointerUnionT</text>
<text text-anchor="start" x="8" y="-134" font-family="Helvetica" font-size="10.00">=llvm::PointerUnion&lt; TrivialCallback *, NonTrivialCallbacks * &gt;;union</text>
<text text-anchor="start" x="8" y="-123" font-family="Helvetica" font-size="10.00"> StorageUnionT { struct OutOfLineStorageT { void *StoragePtr;size_t Size;</text>
<text text-anchor="start" x="8" y="-112" font-family="Helvetica" font-size="10.00">size_t Alignment;} OutOfLineStorage;static_assert(sizeof(OutOfLineStorageT)</text>
<text text-anchor="start" x="8" y="-101" font-family="Helvetica" font-size="10.00">&lt;=InlineStorageSize, &quot;Should always use all of the out&#45;of&#45;line storage for</text>
<text text-anchor="start" x="8" y="-90" font-family="Helvetica" font-size="10.00"> inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="8" y="-79" font-family="Helvetica" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="8" y="-68" font-family="Helvetica" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="8" y="-57" font-family="Helvetica" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="272.5" y="-46" font-family="Helvetica" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M555.01,-131.49C593.82,-123.98 630.38,-116.9 659.8,-111.2"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="554.25,-128.08 545.1,-133.41 555.59,-134.95 554.25,-128.08"/>
<text text-anchor="middle" x="602.5" y="-131" font-family="Helvetica" font-size="10.00"> CallPtr</text>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="classsize__t.html" target="_top" xlink:title=" ">
<polygon fill="none" stroke="black" points="251.5,-0.5 251.5,-19.5 293.5,-19.5 293.5,-0.5 251.5,-0.5"/>
<text text-anchor="middle" x="272.5" y="-7.5" font-family="Helvetica" font-size="10.00">size_t</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node1 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node1</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M303.77,-9.28C354.35,-8.7 458.99,-10.2 545,-29 600.06,-41.04 660.66,-66.48 696.47,-82.88"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="303.48,-5.78 293.54,-9.43 303.59,-12.78 303.48,-5.78"/>
<text text-anchor="middle" x="602.5" y="-62" font-family="Helvetica" font-size="10.00"> InlineStorageSize</text>
</g>
</g>
</svg>
