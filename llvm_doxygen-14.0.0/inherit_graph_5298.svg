<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.48.0 (0)
 -->
<!-- Title: Graphical Class Hierarchy Pages: 1 -->
<svg width="633pt" height="358pt"
 viewBox="0.00 0.00 633.00 358.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 354)">
<title>Graphical Class Hierarchy</title>
<!-- Node0 -->
<g id="node1" class="node">
<title>Node0</title>
<g id="a_node1"><a xlink:href="$classstruct_01IsSizeLessThanThresholdT_3_01T_00_01std_1_1enable__if__t_3_01sizeof_07T_08_3_0a2_0419fb0935c131bc28a1ae7de7137624a.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="0,-0.5 0,-349.5 625,-349.5 625,-0.5 0,-0.5"/>
<text text-anchor="start" x="8" y="-337.5" font-family="Helvetica,sans-Serif" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="8" y="-326.5" font-family="Helvetica,sans-Serif" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="8" y="-315.5" font-family="Helvetica,sans-Serif" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="8" y="-304.5" font-family="Helvetica,sans-Serif" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="8" y="-293.5" font-family="Helvetica,sans-Serif" font-size="10.00"> T &gt; struct AdjustedParamTBase {</text>
<text text-anchor="start" x="8" y="-282.5" font-family="Helvetica,sans-Serif" font-size="10.00"> static_assert(!std::is_reference</text>
<text text-anchor="start" x="8" y="-271.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, &quot;references should be</text>
<text text-anchor="start" x="8" y="-260.5" font-family="Helvetica,sans-Serif" font-size="10.00"> handled by template specialization&quot;)</text>
<text text-anchor="start" x="8" y="-249.5" font-family="Helvetica,sans-Serif" font-size="10.00">;using type=typename std::conditional</text>
<text text-anchor="start" x="8" y="-238.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; llvm::is_trivially_copy_constructible</text>
<text text-anchor="start" x="8" y="-227.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_move_constructible</text>
<text text-anchor="start" x="8" y="-216.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::detail::UniqueFunctionBase</text>
<text text-anchor="start" x="8" y="-205.5" font-family="Helvetica,sans-Serif" font-size="10.00">::IsSizeLessThanThresholdT&lt; T &gt;::value, T, T &amp; &gt;</text>
<text text-anchor="start" x="8" y="-194.5" font-family="Helvetica,sans-Serif" font-size="10.00">::type;};template&lt; typename T &gt; struct AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-183.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &amp; &gt; { using type=T &amp;;};template&lt; typename T &gt; struct</text>
<text text-anchor="start" x="8" y="-172.5" font-family="Helvetica,sans-Serif" font-size="10.00"> AdjustedParamTBase&lt; T &amp;&amp; &gt; { using type=T &amp;;};template</text>
<text text-anchor="start" x="8" y="-161.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; typename T &gt; using AdjustedParamT=typename AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::type;using CallPtrT=R(*)(void *CallableAddr, AdjustedParamT</text>
<text text-anchor="start" x="8" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; ParamTs &gt;... Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="8" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void *CallableAddr)</text>
<text text-anchor="start" x="8" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">;struct alignas(8) TrivialCallback { CallPtrT CallPtr;};struct alignas</text>
<text text-anchor="start" x="8" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00">(8) NonTrivialCallbacks { CallPtrT CallPtr;MovePtrT MovePtr;DestroyPtrT</text>
<text text-anchor="start" x="8" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00"> DestroyPtr;};using CallbackPointerUnionT=llvm::PointerUnion&lt; TrivialCallback</text>
<text text-anchor="start" x="8" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *, NonTrivialCallbacks * &gt;;union StorageUnionT { struct OutOfLineStorageT </text>
<text text-anchor="start" x="8" y="-73.5" font-family="Helvetica,sans-Serif" font-size="10.00">{ void *StoragePtr;size_t Size;size_t Alignment;} OutOfLineStorage;static_assert</text>
<text text-anchor="start" x="8" y="-62.5" font-family="Helvetica,sans-Serif" font-size="10.00">(sizeof(OutOfLineStorageT)&lt;=InlineStorageSize, &quot;Should always use all of the out</text>
<text text-anchor="start" x="8" y="-51.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45;of&#45;line storage for inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="8" y="-40.5" font-family="Helvetica,sans-Serif" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="8" y="-29.5" font-family="Helvetica,sans-Serif" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="8" y="-18.5" font-family="Helvetica,sans-Serif" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="312.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
</g>
</svg>
