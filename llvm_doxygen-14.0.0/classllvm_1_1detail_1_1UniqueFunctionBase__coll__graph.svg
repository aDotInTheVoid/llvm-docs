<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.48.0 (0)
 -->
<!-- Title: llvm::detail::UniqueFunctionBase&lt; ReturnT, ParamTs &gt; Pages: 1 -->
<svg width="911pt" height="396pt"
 viewBox="0.00 0.00 911.00 396.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 392)">
<title>llvm::detail::UniqueFunctionBase&lt; ReturnT, ParamTs &gt;</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="749,-96 749,-126 903,-126 903,-96 749,-96"/>
<text text-anchor="start" x="757" y="-114" font-family="Helvetica,sans-Serif" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="826" y="-103" font-family="Helvetica,sans-Serif" font-size="10.00">Base&lt; ReturnT, ParamTs &gt;</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:title=" ">
<polygon fill="none" stroke="#bfbfbf" points="0,-38.5 0,-387.5 625,-387.5 625,-38.5 0,-38.5"/>
<text text-anchor="start" x="8" y="-375.5" font-family="Helvetica,sans-Serif" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="8" y="-364.5" font-family="Helvetica,sans-Serif" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="8" y="-353.5" font-family="Helvetica,sans-Serif" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="8" y="-342.5" font-family="Helvetica,sans-Serif" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="8" y="-331.5" font-family="Helvetica,sans-Serif" font-size="10.00"> T &gt; struct AdjustedParamTBase {</text>
<text text-anchor="start" x="8" y="-320.5" font-family="Helvetica,sans-Serif" font-size="10.00"> static_assert(!std::is_reference</text>
<text text-anchor="start" x="8" y="-309.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, &quot;references should be</text>
<text text-anchor="start" x="8" y="-298.5" font-family="Helvetica,sans-Serif" font-size="10.00"> handled by template specialization&quot;)</text>
<text text-anchor="start" x="8" y="-287.5" font-family="Helvetica,sans-Serif" font-size="10.00">;using type=typename std::conditional</text>
<text text-anchor="start" x="8" y="-276.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; llvm::is_trivially_copy_constructible</text>
<text text-anchor="start" x="8" y="-265.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_move_constructible</text>
<text text-anchor="start" x="8" y="-254.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::detail::UniqueFunctionBase</text>
<text text-anchor="start" x="8" y="-243.5" font-family="Helvetica,sans-Serif" font-size="10.00">::IsSizeLessThanThresholdT&lt; T &gt;::value, T, T &amp; &gt;</text>
<text text-anchor="start" x="8" y="-232.5" font-family="Helvetica,sans-Serif" font-size="10.00">::type;};template&lt; typename T &gt; struct AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-221.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &amp; &gt; { using type=T &amp;;};template&lt; typename T &gt; struct</text>
<text text-anchor="start" x="8" y="-210.5" font-family="Helvetica,sans-Serif" font-size="10.00"> AdjustedParamTBase&lt; T &amp;&amp; &gt; { using type=T &amp;;};template</text>
<text text-anchor="start" x="8" y="-199.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; typename T &gt; using AdjustedParamT=typename AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-188.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::type;using CallPtrT=ReturnT(*)(void *CallableAddr, AdjustedParamT</text>
<text text-anchor="start" x="8" y="-177.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; ParamTs &gt;... Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="8" y="-166.5" font-family="Helvetica,sans-Serif" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void *CallableAddr)</text>
<text text-anchor="start" x="8" y="-155.5" font-family="Helvetica,sans-Serif" font-size="10.00">;struct alignas(8) TrivialCallback { CallPtrT CallPtr;};struct alignas</text>
<text text-anchor="start" x="8" y="-144.5" font-family="Helvetica,sans-Serif" font-size="10.00">(8) NonTrivialCallbacks { CallPtrT CallPtr;MovePtrT MovePtr;DestroyPtrT</text>
<text text-anchor="start" x="8" y="-133.5" font-family="Helvetica,sans-Serif" font-size="10.00"> DestroyPtr;};using CallbackPointerUnionT=llvm::PointerUnion&lt; TrivialCallback</text>
<text text-anchor="start" x="8" y="-122.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *, NonTrivialCallbacks * &gt;;union StorageUnionT { struct OutOfLineStorageT </text>
<text text-anchor="start" x="8" y="-111.5" font-family="Helvetica,sans-Serif" font-size="10.00">{ void *StoragePtr;size_t Size;size_t Alignment;} OutOfLineStorage;static_assert</text>
<text text-anchor="start" x="8" y="-100.5" font-family="Helvetica,sans-Serif" font-size="10.00">(sizeof(OutOfLineStorageT)&lt;=InlineStorageSize, &quot;Should always use all of the out</text>
<text text-anchor="start" x="8" y="-89.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45;of&#45;line storage for inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="8" y="-78.5" font-family="Helvetica,sans-Serif" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="8" y="-67.5" font-family="Helvetica,sans-Serif" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="8" y="-56.5" font-family="Helvetica,sans-Serif" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="312.5" y="-45.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M635,-148.89C677.39,-140.44 717.2,-132.5 749.32,-126.09"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="634.17,-145.49 625.04,-150.87 635.53,-152.35 634.17,-145.49"/>
<text text-anchor="middle" x="687" y="-149" font-family="Helvetica,sans-Serif" font-size="10.00"> CallPtr</text>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="$classsize__t.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="290,-0.5 290,-19.5 335,-19.5 335,-0.5 290,-0.5"/>
<text text-anchor="middle" x="312.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00">size_t</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node1 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node1</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M345.56,-8.54C402.58,-6.69 525.02,-6.12 625,-29 689.02,-43.65 758.97,-76.59 796.83,-95.97"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="345.24,-5.05 335.37,-8.9 345.49,-12.04 345.24,-5.05"/>
<text text-anchor="middle" x="687" y="-67" font-family="Helvetica,sans-Serif" font-size="10.00"> InlineStorageSize</text>
</g>
</g>
</svg>
