<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.48.0 (0)
 -->
<!-- Title: llvm::unique_function&lt; R(P...)&gt; Pages: 1 -->
<svg width="1783pt" height="455pt"
 viewBox="0.00 0.00 1783.00 455.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 451)">
<title>llvm::unique_function&lt; R(P...)&gt;</title>
<!-- Node1 -->
<g id="node1" class="node">
<title>Node1</title>
<g id="a_node1"><a xlink:title=" ">
<polygon fill="#bfbfbf" stroke="black" points="1653,-369 1653,-399 1775,-399 1775,-369 1653,-369"/>
<text text-anchor="start" x="1661" y="-387" font-family="Helvetica,sans-Serif" font-size="10.00">llvm::unique_function</text>
<text text-anchor="middle" x="1714" y="-376" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; R(P...)&gt;</text>
</a>
</g>
</g>
<!-- Node2 -->
<g id="node2" class="node">
<title>Node2</title>
<g id="a_node2"><a xlink:href="$classllvm_1_1detail_1_1UniqueFunctionBase.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="1462,-369 1462,-399 1616,-399 1616,-369 1462,-369"/>
<text text-anchor="start" x="1470" y="-387" font-family="Helvetica,sans-Serif" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="1539" y="-376" font-family="Helvetica,sans-Serif" font-size="10.00">Base&lt; R, P... &gt;</text>
</a>
</g>
</g>
<!-- Node2&#45;&gt;Node1 -->
<g id="edge1" class="edge">
<title>Node2&#45;&gt;Node1</title>
<path fill="none" stroke="midnightblue" d="M1626.29,-384C1635.3,-384 1644.32,-384 1652.95,-384"/>
<polygon fill="midnightblue" stroke="midnightblue" points="1626.13,-380.5 1616.13,-384 1626.13,-387.5 1626.13,-380.5"/>
</g>
<!-- Node3 -->
<g id="node3" class="node">
<title>Node3</title>
<g id="a_node3"><a xlink:href="$classsize__t.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="290,-426.5 290,-445.5 335,-445.5 335,-426.5 290,-426.5"/>
<text text-anchor="middle" x="312.5" y="-433.5" font-family="Helvetica,sans-Serif" font-size="10.00">size_t</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node2 -->
<g id="edge2" class="edge">
<title>Node3&#45;&gt;Node2</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M345.55,-436.54C474.67,-438.44 969.19,-442.95 1374,-409 1402.84,-406.58 1434.32,-402.21 1461.91,-397.79"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="345.26,-433.04 335.21,-436.38 345.15,-440.04 345.26,-433.04"/>
<text text-anchor="middle" x="1061.5" y="-439" font-family="Helvetica,sans-Serif" font-size="10.00"> InlineStorageSize</text>
</g>
<!-- Node5 -->
<g id="node5" class="node">
<title>Node5</title>
<g id="a_node5"><a xlink:href="$classllvm_1_1detail_1_1UniqueFunctionBase.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="984.5,-369 984.5,-399 1138.5,-399 1138.5,-369 984.5,-369"/>
<text text-anchor="start" x="992.5" y="-387" font-family="Helvetica,sans-Serif" font-size="10.00">llvm::detail::UniqueFunction</text>
<text text-anchor="middle" x="1061.5" y="-376" font-family="Helvetica,sans-Serif" font-size="10.00">Base&lt; ReturnT, ParamTs &gt;</text>
</a>
</g>
</g>
<!-- Node3&#45;&gt;Node5 -->
<g id="edge6" class="edge">
<title>Node3&#45;&gt;Node5</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M345.41,-436.77C402.21,-437.55 524.31,-436.5 625,-417 633.28,-415.4 634.72,-412.62 643,-411 760.62,-387.99 900.06,-383.43 984.33,-383.09"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="345.33,-433.27 335.27,-436.61 345.21,-440.27 345.33,-433.27"/>
<text text-anchor="middle" x="687" y="-414" font-family="Helvetica,sans-Serif" font-size="10.00"> InlineStorageSize</text>
</g>
<!-- Node4 -->
<g id="node4" class="node">
<title>Node4</title>
<g id="a_node4"><a xlink:href="$classstruct_01IsSizeLessThanThresholdT_3_01T_00_01std_1_1enable__if__t_3_01sizeof_07T_08_3_0a2_0419fb0935c131bc28a1ae7de7137624a.html" xlink:title=" ">
<polygon fill="none" stroke="black" points="749,-0.5 749,-349.5 1374,-349.5 1374,-0.5 749,-0.5"/>
<text text-anchor="start" x="757" y="-337.5" font-family="Helvetica,sans-Serif" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="757" y="-326.5" font-family="Helvetica,sans-Serif" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="757" y="-315.5" font-family="Helvetica,sans-Serif" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="757" y="-304.5" font-family="Helvetica,sans-Serif" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="757" y="-293.5" font-family="Helvetica,sans-Serif" font-size="10.00"> T &gt; struct AdjustedParamTBase {</text>
<text text-anchor="start" x="757" y="-282.5" font-family="Helvetica,sans-Serif" font-size="10.00"> static_assert(!std::is_reference</text>
<text text-anchor="start" x="757" y="-271.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, &quot;references should be</text>
<text text-anchor="start" x="757" y="-260.5" font-family="Helvetica,sans-Serif" font-size="10.00"> handled by template specialization&quot;)</text>
<text text-anchor="start" x="757" y="-249.5" font-family="Helvetica,sans-Serif" font-size="10.00">;using type=typename std::conditional</text>
<text text-anchor="start" x="757" y="-238.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; llvm::is_trivially_copy_constructible</text>
<text text-anchor="start" x="757" y="-227.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_move_constructible</text>
<text text-anchor="start" x="757" y="-216.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::detail::UniqueFunctionBase</text>
<text text-anchor="start" x="757" y="-205.5" font-family="Helvetica,sans-Serif" font-size="10.00">::IsSizeLessThanThresholdT&lt; T &gt;::value, T, T &amp; &gt;</text>
<text text-anchor="start" x="757" y="-194.5" font-family="Helvetica,sans-Serif" font-size="10.00">::type;};template&lt; typename T &gt; struct AdjustedParamTBase</text>
<text text-anchor="start" x="757" y="-183.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &amp; &gt; { using type=T &amp;;};template&lt; typename T &gt; struct</text>
<text text-anchor="start" x="757" y="-172.5" font-family="Helvetica,sans-Serif" font-size="10.00"> AdjustedParamTBase&lt; T &amp;&amp; &gt; { using type=T &amp;;};template</text>
<text text-anchor="start" x="757" y="-161.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; typename T &gt; using AdjustedParamT=typename AdjustedParamTBase</text>
<text text-anchor="start" x="757" y="-150.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::type;using CallPtrT=R(*)(void *CallableAddr, AdjustedParamT</text>
<text text-anchor="start" x="757" y="-139.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; ParamTs &gt;... Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="757" y="-128.5" font-family="Helvetica,sans-Serif" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void *CallableAddr)</text>
<text text-anchor="start" x="757" y="-117.5" font-family="Helvetica,sans-Serif" font-size="10.00">;struct alignas(8) TrivialCallback { CallPtrT CallPtr;};struct alignas</text>
<text text-anchor="start" x="757" y="-106.5" font-family="Helvetica,sans-Serif" font-size="10.00">(8) NonTrivialCallbacks { CallPtrT CallPtr;MovePtrT MovePtr;DestroyPtrT</text>
<text text-anchor="start" x="757" y="-95.5" font-family="Helvetica,sans-Serif" font-size="10.00"> DestroyPtr;};using CallbackPointerUnionT=llvm::PointerUnion&lt; TrivialCallback</text>
<text text-anchor="start" x="757" y="-84.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *, NonTrivialCallbacks * &gt;;union StorageUnionT { struct OutOfLineStorageT </text>
<text text-anchor="start" x="757" y="-73.5" font-family="Helvetica,sans-Serif" font-size="10.00">{ void *StoragePtr;size_t Size;size_t Alignment;} OutOfLineStorage;static_assert</text>
<text text-anchor="start" x="757" y="-62.5" font-family="Helvetica,sans-Serif" font-size="10.00">(sizeof(OutOfLineStorageT)&lt;=InlineStorageSize, &quot;Should always use all of the out</text>
<text text-anchor="start" x="757" y="-51.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45;of&#45;line storage for inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="757" y="-40.5" font-family="Helvetica,sans-Serif" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="757" y="-29.5" font-family="Helvetica,sans-Serif" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="757" y="-18.5" font-family="Helvetica,sans-Serif" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="1061.5" y="-7.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node4&#45;&gt;Node2 -->
<g id="edge3" class="edge">
<title>Node4&#45;&gt;Node2</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M1383.19,-315.95C1431.92,-337.37 1475.33,-356.46 1503.7,-368.92"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="1384.59,-312.75 1374.03,-311.93 1381.77,-319.16 1384.59,-312.75"/>
<text text-anchor="middle" x="1418" y="-342" font-family="Helvetica,sans-Serif" font-size="10.00"> CallPtr</text>
</g>
<!-- Node5&#45;&gt;Node2 -->
<g id="edge4" class="edge">
<title>Node5&#45;&gt;Node2</title>
<path fill="none" stroke="orange" stroke-dasharray="5,2" d="M1148.74,-384C1238.04,-384 1376.25,-384 1461.7,-384"/>
<polygon fill="orange" stroke="orange" points="1148.63,-380.5 1138.63,-384 1148.63,-387.5 1148.63,-380.5"/>
<text text-anchor="middle" x="1418" y="-387" font-family="Helvetica,sans-Serif" font-size="10.00"> &lt; R, P... &gt;</text>
</g>
<!-- Node6 -->
<g id="node6" class="node">
<title>Node6</title>
<g id="a_node6"><a xlink:title=" ">
<polygon fill="none" stroke="#bfbfbf" points="0,-58.5 0,-407.5 625,-407.5 625,-58.5 0,-58.5"/>
<text text-anchor="start" x="8" y="-395.5" font-family="Helvetica,sans-Serif" font-size="10.00">struct IsSizeLessThanThreshold</text>
<text text-anchor="start" x="8" y="-384.5" font-family="Helvetica,sans-Serif" font-size="10.00">T&lt; T, std::enable_if_t&lt; sizeof</text>
<text text-anchor="start" x="8" y="-373.5" font-family="Helvetica,sans-Serif" font-size="10.00">(T)&lt;=2 *sizeof(void *)&gt; &gt; :std</text>
<text text-anchor="start" x="8" y="-362.5" font-family="Helvetica,sans-Serif" font-size="10.00">::true_type {};template&lt; typename</text>
<text text-anchor="start" x="8" y="-351.5" font-family="Helvetica,sans-Serif" font-size="10.00"> T &gt; struct AdjustedParamTBase {</text>
<text text-anchor="start" x="8" y="-340.5" font-family="Helvetica,sans-Serif" font-size="10.00"> static_assert(!std::is_reference</text>
<text text-anchor="start" x="8" y="-329.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value, &quot;references should be</text>
<text text-anchor="start" x="8" y="-318.5" font-family="Helvetica,sans-Serif" font-size="10.00"> handled by template specialization&quot;)</text>
<text text-anchor="start" x="8" y="-307.5" font-family="Helvetica,sans-Serif" font-size="10.00">;using type=typename std::conditional</text>
<text text-anchor="start" x="8" y="-296.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; llvm::is_trivially_copy_constructible</text>
<text text-anchor="start" x="8" y="-285.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::is_trivially_move_constructible</text>
<text text-anchor="start" x="8" y="-274.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::value &amp;&amp;llvm::detail::UniqueFunctionBase</text>
<text text-anchor="start" x="8" y="-263.5" font-family="Helvetica,sans-Serif" font-size="10.00">::IsSizeLessThanThresholdT&lt; T &gt;::value, T, T &amp; &gt;</text>
<text text-anchor="start" x="8" y="-252.5" font-family="Helvetica,sans-Serif" font-size="10.00">::type;};template&lt; typename T &gt; struct AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-241.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &amp; &gt; { using type=T &amp;;};template&lt; typename T &gt; struct</text>
<text text-anchor="start" x="8" y="-230.5" font-family="Helvetica,sans-Serif" font-size="10.00"> AdjustedParamTBase&lt; T &amp;&amp; &gt; { using type=T &amp;;};template</text>
<text text-anchor="start" x="8" y="-219.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; typename T &gt; using AdjustedParamT=typename AdjustedParamTBase</text>
<text text-anchor="start" x="8" y="-208.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; T &gt;::type;using CallPtrT=ReturnT(*)(void *CallableAddr, AdjustedParamT</text>
<text text-anchor="start" x="8" y="-197.5" font-family="Helvetica,sans-Serif" font-size="10.00">&lt; ParamTs &gt;... Params);using MovePtrT=void(*)(void *LHSCallableAddr,</text>
<text text-anchor="start" x="8" y="-186.5" font-family="Helvetica,sans-Serif" font-size="10.00"> void *RHSCallableAddr);using DestroyPtrT=void(*)(void *CallableAddr)</text>
<text text-anchor="start" x="8" y="-175.5" font-family="Helvetica,sans-Serif" font-size="10.00">;struct alignas(8) TrivialCallback { CallPtrT CallPtr;};struct alignas</text>
<text text-anchor="start" x="8" y="-164.5" font-family="Helvetica,sans-Serif" font-size="10.00">(8) NonTrivialCallbacks { CallPtrT CallPtr;MovePtrT MovePtr;DestroyPtrT</text>
<text text-anchor="start" x="8" y="-153.5" font-family="Helvetica,sans-Serif" font-size="10.00"> DestroyPtr;};using CallbackPointerUnionT=llvm::PointerUnion&lt; TrivialCallback</text>
<text text-anchor="start" x="8" y="-142.5" font-family="Helvetica,sans-Serif" font-size="10.00"> *, NonTrivialCallbacks * &gt;;union StorageUnionT { struct OutOfLineStorageT </text>
<text text-anchor="start" x="8" y="-131.5" font-family="Helvetica,sans-Serif" font-size="10.00">{ void *StoragePtr;size_t Size;size_t Alignment;} OutOfLineStorage;static_assert</text>
<text text-anchor="start" x="8" y="-120.5" font-family="Helvetica,sans-Serif" font-size="10.00">(sizeof(OutOfLineStorageT)&lt;=InlineStorageSize, &quot;Should always use all of the out</text>
<text text-anchor="start" x="8" y="-109.5" font-family="Helvetica,sans-Serif" font-size="10.00">&#45;of&#45;line storage for inline storage!&quot;);mutable typename std::aligned_storage&lt; InlineStorageSize,</text>
<text text-anchor="start" x="8" y="-98.5" font-family="Helvetica,sans-Serif" font-size="10.00"> alignof(void *)&gt;::type InlineStorage;} StorageUnion;llvm::PointerIntPair&lt; CallbackPointerUnionT,</text>
<text text-anchor="start" x="8" y="-87.5" font-family="Helvetica,sans-Serif" font-size="10.00"> 1, bool &gt; CallbackAndInlineFlag;bool isInlineStorage() const { return CallbackAndInlineFlag.getInt</text>
<text text-anchor="start" x="8" y="-76.5" font-family="Helvetica,sans-Serif" font-size="10.00">();} bool isTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template is&lt; TrivialCallback</text>
<text text-anchor="middle" x="312.5" y="-65.5" font-family="Helvetica,sans-Serif" font-size="10.00"> * &gt;();} CallPtrT getTrivialCallback() const { return CallbackAndInlineFlag.getPointer().template get&lt; TrivialCallback * &gt;() &#45;&gt;</text>
</a>
</g>
</g>
<!-- Node6&#45;&gt;Node5 -->
<g id="edge5" class="edge">
<title>Node6&#45;&gt;Node5</title>
<path fill="none" stroke="#9a32cd" stroke-dasharray="5,2" d="M634.81,-333.81C673.03,-343.47 711.71,-352.18 749,-359 828.52,-373.54 921,-379.62 984.41,-382.17"/>
<polygon fill="#9a32cd" stroke="#9a32cd" points="635.66,-330.42 625.1,-331.34 633.93,-337.2 635.66,-330.42"/>
<text text-anchor="middle" x="687" y="-357" font-family="Helvetica,sans-Serif" font-size="10.00"> CallPtr</text>
</g>
</g>
</svg>
